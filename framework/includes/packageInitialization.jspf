<%--
    This file is responsible for initializing the package framework.  It loads
    the core bundleInitialization.jspf file (which is responsible for
    initializing the bundle framework), loads the core noCache.jspf file (which
    ensures that all of the package pages are not cached by the client or a
    proxy, loads the package configuration file, and loads any present helpers
    or models.

    This file will need to be modified if there are any helper or model classes
    that are added to the package.  Samples are included below.
--%>

<%--
    Initialize the bundle and load any necessary dependencies.
--%>
<%@include file="../../../../core/framework/includes/bundleInitialization.jspf"%>

<%--
    Retrieve the default helper context.  This is used because a call in this
    package must be made by a proxy admin user.
--%>
<%
    HelperContext systemContext = com.kd.kineticSurvey.impl.RemedyHandler.getDefaultHelperContext();
%>

<%--
    Retrieve the survey logger that allows us to write to the kslog.
--%>
<%
    org.apache.log4j.Logger logger = com.kd.kineticSurvey.impl.SurveyLogger.getLogger();
%>

<%--
    Ensure the response is not cached by client or proxy.
--%>
<%@include file="../../../../core/framework/includes/noCache.jspf"%>

<%--
    Include any helper files.  By convention, package specific logic (such as
    the building of URLs) should be included in a PackageHelper helper class.

    Format:
      <%@include file="../helpers/HELPER.jspf
    Example:
      <%@include file="../helpers/LanguageHelper.jspf
      <%@include file="../helpers/PackageHelper.jspf
--%>
<%@include file="../helpers/PackageHelper.jspf" %>
<%@include file="../helpers/MultiFormSearch.jspf" %>
<%@include file="../../../../common/framework/helpers/PathHelper.jspf" %>

<%--
    Include any model files.

    Format:
      <%@include file="../models/SYSTEM/MODEL.jspf
    Example:
      <%@include file="../models/kineticSample/Change.jspf
      <%@include file="../models/kineticSample/Incident.jspf
      <%@include file="../models/kineticSample/Person.jspf
--%>
<%@include file="../models/KnowledgeArticle.jspf" %>
<%@include file="../models/DecisionTree.jspf" %>
<%@include file="../models/HowTo.jspf" %>
<%@include file="../models/KnownError.jspf" %>
<%@include file="../models/ProblemSolution.jspf" %>
<%@include file="../models/Reference.jspf" %>

<%--
    Instantiate any appropriate helper objects.  By convention, the
    PackageHelper class will typically be instantiated here.  The PackageHelper
    requires the current bundle object to be passed as a parameter (so that the
    package URL paths can be made relative to the current bundle/package without
    hard coding in the name of the bundle or package).
--%>
<% PackageHelper packageHelper = new PackageHelper(bundle); %>
<% PathHelper pathHelper = new PathHelper(bundle); %>

<%--
    Include the package configuration file.
--%>
<%@include file="../../config/config.jspf" %>

<%--
    Create an ARServerUser instance that will be used as an admin proxy user to
    make calls the current authenticated user may not be able to.  This is
    necessary because this package requires a direct sql call which requires
    admin access.  The authentication information for this user is defined via
    bundle properties but the username and password default to the default
    helper context of the kinetic request server.
--%>
<%
    com.bmc.arsys.api.ARServerUser systemUser = new com.bmc.arsys.api.ARServerUser(
                serverSideBundle.getProperty("rkmAdminUsername"),
                serverSideBundle.getProperty("rkmAdminPassword"),
                serverSideBundle.getProperty("rkmLocale"),
                serverSideBundle.getProperty("rkmServer"));
        systemUser.setPort(Integer.parseInt(serverSideBundle.getProperty("rkmPort")));
        systemUser.login();
%>
<%--
    Create an ARServerUser instance that will be used to query the multi search
    form.  This instance is created by retrieving the username and password from
    the current context and using the bundle properties that define the rkm
    server.  This assumes that the user record will be the same on the kinetic
    request and rkm servers.

    Note that if the context is using impersonate user we will create the new
    ARServerUser instance using the username and password from the systemContext
    variable rather than context.  Then we will set impersonated user on using
    the username from the current context.
--%>
<%
    com.bmc.arsys.api.ARServerUser serverUser = null;
    if (context != null) {
        if (context.isImpersonating()) {
            serverUser = new com.bmc.arsys.api.ARServerUser(
                systemContext.getUserName(),
                systemContext.getPassword(),
                serverSideBundle.getProperty("rkmLocale"),
                serverSideBundle.getProperty("rkmServer"));
            serverUser.setImpersonatedUser(context.getUserName());
        } else {
            serverUser = new com.bmc.arsys.api.ARServerUser(
                context.getUserName(),
                context.getPassword(),
                serverSideBundle.getProperty("rkmLocale"),
                serverSideBundle.getProperty("rkmServer"));
        }
        serverUser.setPort(Integer.parseInt(serverSideBundle.getProperty("rkmPort")));
        serverUser.login();
    }
%>
